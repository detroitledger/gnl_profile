<?php
/**
 * @file
 * Module file for gnl_dash.
 *
 * What should it do?
 */

/**
 * Implements hook_user_login().
 *
 * Redirect qualified users to the dashboard.
 */
function gnl_dash_user_login(&$edit, $account) {
  if (!isset($_POST['form_id']) || $_POST['form_id'] != 'user_pass_reset' && _gnl_dash_check_user($account)) {
    $_GET['destination'] = 'grantentry/build/';
  }
}

/**
 * Check if user should see the dashboard.
 *
 * @param object $user
 *   Drupal user account object
 *
 * @return bool
 */
function _gnl_dash_check_user($user) {
  $user_roles = array_values($user->roles);

  if (!is_array($user_roles)) {
    return false;
  }

  if (in_array('grantentry', $user_roles)) {
    return true;
  }

  return false;
}

/**
 * Implements hook_services_resources().
 *
 * Let services API know about our resource.
 */
function gnl_dash_services_resources() {
  $common_access_args = [
    [
      'name' => 'secret',
      'type' => 'string',
      'source' => [ 'param' => 'secret' ],
      'description' => 'Server secret',
      'optional' => FALSE,
    ],
    [
      'name' => 'email',
      'type' => 'string',
      'source' => [ 'param' => 'email' ],
      'description' => 'Email of user to be queried',
      'optional' => FALSE,
    ],
  ];

  return [
    'assigned_pdfs' => [
      'operations' => [
        'index' => [
          'help' => 'Retrieves all grant entry PDFs for logged-in user',
          'callback' => '_gnl_dash_index_user_pdfs',
          'access callback' => '_gnl_dash_user_pdfs_access',
          'access arguments' => ['index'],
          'access arguments append' => TRUE,
          'args' => $common_access_args,
        ],
        'update' => [
          'help' => 'Update user grant entry PDF',
          'callback' => '_gnl_dash_update_user_pdf',
          'access callback' => '_gnl_dash_user_pdfs_access',
          'access arguments' => ['update'],
          'access arguments append' => TRUE,
          'args' => array_push($common_access_args,
            [
              'name' => 'id',
              'type' => 'int',
              'source' => [ 'path' => 0 ],
              'description' => 'User PDF ID',
              'optional' => FALSE,
            ],
            [
              'name' => 'currentpg',
              'type' => 'int',
              'source' => [ 'data' => 'currentpg' ],
              'description' => 'Current page',
              'optional' => FALSE,
            ],
            [
              'name' => 'done',
              'type' => 'bool',
              'source' => [ 'data' => 'done' ],
              'description' => 'Done?',
              'optional' => FALSE,
            ]
          ),
        ],
      ],
    ],
  ];
}

/*
 * @param string $secret server secret (only used in auth stage, unused here)
 * @param string $email user email
 *
 * @return array
 *   user pdfs
 */
function _gnl_dash_index_user_pdfs($secret, $email) {
  $user = _gnl_dash_user_load_or_create($email);

  // Retrieve the pdfs from this user's records.
  $u = entity_metadata_wrapper('user', $user);
  $rawvalues = $u->field_grantentry_todos->value();

  // We'll eventually return this variable.
  $pdfs = [];

  foreach ($rawvalues as $raw) {
    $f = entity_metadata_wrapper('field_collection_item', $raw);
    $pdfs[] = _gnl_dash_serialize_pdf($f);
  }

  return $pdfs;
}

function _gnl_dash_serialize_pdf($f) {
  return  [
    'id' => (int) $f->item_id->value(),
    'org' => [
      'id' => (int) $f->field_grantentry_org->value()->nid,
      'name' => $f->field_grantentry_org->value()->title,
    ],
    'pdfurl' => file_create_url($f->field_grantentry_pdf->value()['uri']),
    'done' => $f->field_grantentry_done->value(),
    'year' => (int) $f->field_grantentry_year->value(),
    'currentpg'  => (int) $f->field_grantentry_currentpg->value(),
  ];
}

/**
 * @param string $secret server secret (only used in auth stage, unused here)
 * @param string $email user email
 * @param int $id
 * @param int $currentpg
 * @param bool $done
 *
 * @return array
 *   serialized user pdf
 */
function _gnl_dash_update_user_pdf($secret, $email, $id, $currentpg, $done) {
  $user = _gnl_dash_user_load_or_create($email);

  // Check to make sure this user has a grantentry pdf w/ the given id.
  $u = entity_metadata_wrapper('user', $user);
  $rawvalues = $u->field_grantentry_todos->value();

  // The matching PDF field goes here.
  $f_wrapped = null;
  // Find this pdf field in the collection.
  foreach ($rawvalues as $f_raw) {
    if ($f_raw->item_id == $id) {
      $f_wrapped = entity_metadata_wrapper('field_collection_item', $f_raw);
      break;
    }
  }

  // If we haven't found the PDF record, return 400.
  if ($f_wrapped === null) {
    return services_error('user pdf does not exist for your user', 400);
  }

  // Change its properties and save it
  $f_wrapped->field_grantentry_currentpg = $currentpg;
  $f_wrapped->field_grantentry_done = $done;
  $f_wrapped->save();

  return _gnl_dash_serialize_pdf($f_wrapped);
}

function _gnl_dash_user_load_or_create($email) {
  $user = user_load_by_mail($email);

  // Create a new user on the fly, if necessary
  if ($user == null) {
    $roles = [ DRUPAL_AUTHENTICATED_RID => 'authenticated user' ];
    $roles[user_role_load_by_name('grantentry')->rid] = 'grantentry';

    $user = user_save(null, [
      'name' => $email,
      'pass' => variable_get('gnl_dash_shared_secret'),
      'mail' => $email,
      'status' => 1,
      'language' => 'en',
      'timezone' => 'America/Detroit',
      'init' => $email,
      'roles' => $roles,
    ]);
  }

  return $user;
}

/**
* Access callback for user PDFs.
*
* @param string $op
*  The operation that's going to be performed.
* @param array $args
*  The arguments that will be passed to the callback.
* @return bool
*  Whether access is given or not.
*/
function _gnl_dash_user_pdfs_access($op, $args) {
  $shared_secret = variable_get('gnl_dash_shared_secret');

  list($provided_secret, $email) = $args;
  if ($shared_secret == null || $provided_secret != $shared_secret) {
    throw new ServicesException('Bad secret', 403);
  }

  $user = _gnl_dash_user_load_or_create($email);

  switch ($op) {
    case 'update':
      list(,, $pdf_id) = $args;
      $pdf = field_collection_item_load($pdf_id);
      $access = user_access('user pdf edit any user pdfs');
      return $access || $pdf->hostEntity()->uid == $user->uid && user_access('user pdf edit own user pdfs');

    case 'index':
      return user_access('user pdf view own user pdfs', $user);
  }

  return false;
}

/**
  * Implements hook_permission().
  */
function gnl_dash_permission() {
  return [
    'user pdf create' => [
      'title' => t('user pdf: create'),
      'description' => t('create'),
    ],
    'user pdf view any user pdf' => [
      'title' => t('user pdf: view any user pdf'),
      'description' => t('view any user pdf'),
    ],
    'user pdf view own user pdfs' => [
      'title' => t('user pdf: view own user pdfs'),
      'description' => t('view own user pdfs'),
    ],
    'user pdf edit any user pdf' => [
      'title' => t('user pdf: edit any user pdf'),
      'description' => t('edit any user pdfs'),
    ],
    'user pdf edit own user pdfs' => [
      'title' => t('user pdf: edit own user pdfs'),
      'description' => t('edit own user pdfs'),
    ],
    'user pdf delete any user pdf' => [
      'title' => t('user pdf: delete any user pdf'),
      'description' => t('delete any user pdf'),
    ],
    'user pdf delete own user pdfs' => [
      'title' => t('user pdf: delete own user pdfs'),
      'description' => t('delete own user pdf'),
    ],
  ];
}

/**
 * Adds some css to the node add grant page.
 */
function gnl_dash_init() {
  global $user;
  if (_gnl_dash_check_user($user) && (drupal_get_path_alias() == 'node/add/grant' || drupal_get_path_alias() == 'node/add/org')) {
    drupal_add_css('profiles/gnl_profile/modules/custom/gnl_dash/node-add-styles.css');
  }
}
