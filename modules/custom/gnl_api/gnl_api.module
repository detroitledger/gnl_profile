<?php

/**
 * @file gnl_api.module
 */

define("GNL_API_DEFAULT_LIMIT", 100);
define("GNL_API_MAX_LIMIT", 1000);
define("GNL_API_FLAG_NAME", "flag");

/**
 * Implements hook_init().
 * DIY CORS.
 */
function gnl_api_init() {
  $method = $_SERVER['REQUEST_METHOD'];
  if (isset($_SERVER['HTTP_ORIGIN'])) {
    drupal_add_http_header('Access-Control-Allow-Origin', $_SERVER['HTTP_ORIGIN']);
  }
  if (isset($_SERVER['HTTP_ACCESS_CONTROL_REQUEST_HEADERS'])) {
    drupal_add_http_header('Access-Control-Allow-Headers', $_SERVER['HTTP_ACCESS_CONTROL_REQUEST_HEADERS']);
  }
  if (isset($_SERVER['HTTP_ACCESS_CONTROL_REQUEST_METHOD'])) {
    drupal_add_http_header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
  }
  if ($method == 'OPTIONS') {
    exit; // CORS client gets what it wants
  }
}

/**
 * Implements hook_services_resources().
 */
function gnl_api_services_resources() {
  $api = array(
    'orgs' => array(
      'operations' => array(
        'retrieve' => array(
          'help' => 'Retrieves Organization',
          'callback' => '_gnl_api_retrieve_org',
          'access callback' => 'user_access',
          'access arguments' => array('access content'),
          'access arguments append' => FALSE,
          'args' => array(
            array(
              'name' => 'id',
              'type' => 'int',
              'description' => 'Organization ID',
              'source' => array('path' => '0'),
              'optional' => FALSE,
              'default value' => NULL,
            ),
          ),
        ),
        'index' => array(
          'help' => 'Lists Organizations',
          'callback' => '_gnl_api_index_orgs',
          'access arguments' => array('access content'),
          'args' => array(
            array(
              'name' => 'limit',
              'type' => 'int',
              'description' => 'Limit response count (default ' . GNL_API_DEFAULT_LIMIT . ')',
              'source' => array('param' => 'limit'),
              'optional' => TRUE,
              'default value' => GNL_API_DEFAULT_LIMIT,
            ),
            array(
              'name' => 'offset',
              'type' => 'int',
              'description' => 'Offset starting record',
              'source' => array('param' => 'offset'),
              'optional' => TRUE,
              'default value' => 0,
            ),
            array(
              'name' => 'filters',
              'type' => 'array',
              'description' => 'Filter properties',
              'source' => array('param' => 'filters'),
              'optional' => TRUE,
              'default value' => array(),
            ),
            array(
              'name' => 'sort',
              'type' => 'array',
              'description' => 'Sort by property and order by value (ASC or DESC)',
              'source' => array('param' => 'sort'),
              'optional' => TRUE,
              'default value' => array(),
            ),
          ),
        ),
      ),
      'relationships' => array(
        'grants_funded' => array(
          'help' => 'Lists grants given by this Organization',
          'callback' => '_gnl_api_related_org_grants_funded',
          'access arguments' => array('access content'),
          'args' => array(
            array(
              'name' => 'org_id',
              'optional' => 'false',
              'source' => array('path' => 0),
              'type' => 'int',
              'description' => 'Organization ID',
            ),
            array(
              'name' => 'limit',
              'type' => 'int',
              'description' => 'Limit response count (default ' . GNL_API_DEFAULT_LIMIT . ')',
              'source' => array('param' => 'limit'),
              'optional' => TRUE,
              'default value' => GNL_API_DEFAULT_LIMIT,
            ),
            array(
              'name' => 'offset',
              'type' => 'int',
              'description' => 'Offset starting record',
              'source' => array('param' => 'offset'),
              'optional' => TRUE,
              'default value' => 0,
            ),
          ),
        ),
        'grants_received' => array(
          'help' => 'Lists grants received by this Organization',
          'callback' => '_gnl_api_related_org_grants_received',
          'access arguments' => array('access content'),
          'args' => array(
            array(
              'name' => 'org_id',
              'optional' => 'false',
              'source' => array('path' => 0),
              'type' => 'int',
              'description' => 'Organization ID',
            ),
            array(
              'name' => 'limit',
              'type' => 'int',
              'description' => 'Limit response count (default ' . GNL_API_DEFAULT_LIMIT . ')',
              'source' => array('param' => 'limit'),
              'optional' => TRUE,
              'default value' => GNL_API_DEFAULT_LIMIT,
            ),
            array(
              'name' => 'offset',
              'type' => 'int',
              'description' => 'Offset starting record',
              'source' => array('param' => 'offset'),
              'optional' => TRUE,
              'default value' => 0,
            ),
          ),
        ),
        'board_members' => array(
          'help' => 'Lists people on the board of this Organization',
          'callback' => '_gnl_api_related_org_board_members',
          'access arguments' => array('access content'),
          'args' => array(
            array(
              'name' => 'person_id',
              'optional' => 'false',
              'source' => array('path' => 0),
              'type' => 'int',
              'description' => 'Person ID',
            ),
            array(
              'name' => 'limit',
              'type' => 'int',
              'description' => 'Limit response count (default ' . GNL_API_DEFAULT_LIMIT . ')',
              'source' => array('param' => 'limit'),
              'optional' => TRUE,
              'default value' => GNL_API_DEFAULT_LIMIT,
            ),
            array(
              'name' => 'offset',
              'type' => 'int',
              'description' => 'Offset starting record',
              'source' => array('param' => 'offset'),
              'optional' => TRUE,
              'default value' => 0,
            ),
          ),
        ),
      ),
    ),
    'grants' => array(
      'operations' => array(
        'retrieve' => array(
          'help' => 'Retrieves Grant',
          'callback' => '_gnl_api_retrieve_grant',
          'access callback' => 'user_access',
          'access arguments' => array('access content'),
          'access arguments append' => FALSE,
          'args' => array(
            array(
              'name' => 'id',
              'type' => 'int',
              'description' => 'Grant ID',
              'source' => array('path' => '0'),
              'optional' => FALSE,
              'default value' => NULL,
            ),
          ),
        ),
        'index' => array(
          'help' => 'Lists Grants',
          'callback' => '_gnl_api_index_grants',
          'access arguments' => array('access content'),
          'args' => array(
            array(
              'name' => 'limit',
              'type' => 'int',
              'description' => 'Limit response count (default ' . GNL_API_DEFAULT_LIMIT . ')',
              'source' => array('param' => 'limit'),
              'optional' => TRUE,
              'default value' => GNL_API_DEFAULT_LIMIT,
            ),
            array(
              'name' => 'offset',
              'type' => 'int',
              'description' => 'Offset starting record',
              'source' => array('param' => 'offset'),
              'optional' => TRUE,
              'default value' => 0,
            ),
            array(
              'name' => 'filters',
              'type' => 'array',
              'description' => 'Filter properties',
              'source' => array('param' => 'filters'),
              'optional' => TRUE,
              'default value' => array(),
            ),
            array(
              'name' => 'sort',
              'type' => 'array',
              'description' => 'Sort by property and order by value (ASC or DESC)',
              'source' => array('param' => 'sort'),
              'optional' => TRUE,
              'default value' => array(),
            ),
          ),
        ),
      ),
    ),
    'people' => array(
      'operations' => array(
        'retrieve' => array(
          'help' => 'Retrieves Person',
          'callback' => '_gnl_api_retrieve_person',
          'access callback' => 'user_access',
          'access arguments' => array('access content'),
          'access arguments append' => FALSE,
          'args' => array(
            array(
              'name' => 'id',
              'type' => 'int',
              'description' => 'Person ID',
              'source' => array('path' => '0'),
              'optional' => FALSE,
              'default value' => NULL,
            ),
          ),
        ),
        'index' => array(
          'help' => 'Lists People',
          'callback' => '_gnl_api_index_people',
          'access arguments' => array('access content'),
          'args' => array(
            array(
              'name' => 'limit',
              'type' => 'int',
              'description' => 'Limit response count (default ' . GNL_API_DEFAULT_LIMIT . ')',
              'source' => array('param' => 'limit'),
              'optional' => TRUE,
              'default value' => GNL_API_DEFAULT_LIMIT,
            ),
            array(
              'name' => 'offset',
              'type' => 'int',
              'description' => 'Offset starting record',
              'source' => array('param' => 'offset'),
              'optional' => TRUE,
              'default value' => 0,
            ),
            array(
              'name' => 'filters',
              'type' => 'array',
              'description' => 'Filter properties',
              'source' => array('param' => 'filters'),
              'optional' => TRUE,
              'default value' => array(),
            ),
            array(
              'name' => 'sort',
              'type' => 'array',
              'description' => 'Sort by property and order by value (ASC or DESC)',
              'source' => array('param' => 'sort'),
              'optional' => TRUE,
              'default value' => array(),
            ),
          ),
        ),
      ),
    ),
    'stats' => array(
      'operations' => array(
        'index' => array(
          'help' => 'Get statistics about all the data',
          'callback' => '_gnl_api_index_stats',
          'access arguments' => array('access content'),
        ),
      ),
    ),
    'flags' => array(
      'operations' => array(
        'retrieve' => array(
          'help' => 'Retrieves Flag',
          'callback' => '_gnl_api_retrieve_flag',
          'access callback' => 'user_access',
          'access arguments' => array('access flag'), // @todo who can access flags via public API?
          'access arguments append' => FALSE,
          'args' => array(
            array(
              'name' => 'id',
              'type' => 'int',
              'description' => 'Organization ID',
              'source' => array('path' => '0'),
              'optional' => FALSE,
              'default value' => NULL,
            ),
          ),
        ),
        'create' => array(
          'help' => 'Creates Flag',
          'callback' => '_gnl_api_create_flag',
          'access callback' => 'user_access',
          'access arguments' => array('access content'),
          'access arguments append' => FALSE,
          'args' => array(
            array(
              'name' => 'data',
              'type' => 'struct',
              'description' => 'Object containing flag object containing target_id and note properties',
              'source' => 'data',
              'optional' => FALSE,
            ),
          ),
        ),
      ),
    ),
  );

  return $api;
}

function _gnl_api_create_flag($data) {
  if (!isset($data["target_id"]) || !isset($data["note"])) {
    return services_error('missing required property', 400);
  }

  // @todo change this when we do API auth
  $_COOKIE = true;

  $flagging = entity_create('flagging', array('flag_name' => GNL_API_FLAG_NAME));
  $flagging->entity_id = $data["target_id"];
  $flagging_wrapper = entity_metadata_wrapper('flagging', $flagging);
  $flagging_wrapper->field_note->set($data["note"]);
  $flagging_wrapper->field_ip->set(ip2long(ip_address()));

  $flag = flag_get_flag(GNL_API_FLAG_NAME);

  $flagging->entity_type = $flag->entity_type;
  $flagging->fid = $flag->fid;

  try {
    field_attach_validate('flagging', $flagging);
  } catch (Exception $e) {
    return services_error('field validation error', 400);
  }
  $ret = $flag->flag('flag', $data["target_id"], NULL, FALSE, $flagging);

  return array(
    "id" => $flagging->flagging_id,
    "target_id" => $flagging->entity_id,
    "note" => $flagging->field_note[LANGUAGE_NONE][0]['value'],
  );
}

function _gnl_api_index_stats() {
  $stats = &drupal_static(__FUNCTION__);
  if (!isset($stats)) {
    if ($cache = cache_get('gnl_api_stats')) {
      $stats = $cache->data;
    } else {
      $stats = array(
        'total_num_grants' => (int) db_query("SELECT COUNT(*) FROM {node} WHERE type='grant' AND STATUS=1")->fetchField(),
        'total_num_orgs' => (int) db_query("SELECT COUNT(*) FROM {node} WHERE type='org' AND STATUS=1")->fetchField(),
        'total_num_funders' => (int) db_query("SELECT COUNT(DISTINCT(fdff.field_funder_target_id)) FROM {field_data_field_funder} AS fdff INNER JOIN {node} AS n ON fdff.entity_id=n.nid WHERE n.status=1")->fetchField(),
        'total_num_recipients' => (int) db_query("SELECT COUNT(DISTINCT(fdfr.field_recipient_target_id)) FROM {field_data_field_recipient} AS fdfr INNER JOIN {node} AS n ON fdfr.entity_id=n.nid WHERE n.status=1")->fetchField(),
        'total_grants_dollars' => (int) db_query("SELECT SUM(fdffa.field_funded_amount_value) FROM {field_data_field_funded_amount} AS fdffa INNER JOIN {node} AS n ON fdffa.entity_id=n.nid WHERE n.status=1")->fetchField(),
        'total_num_people' => (int) db_query("SELECT COUNT(*) FROM {node} WHERE type='person' AND STATUS=1")->fetchField(),
      );
      cache_set('gnl_api_stats', $stats, 'cache');
    }
  }
  return $stats;
}

/**
 * Implements hook_entity_postsave().
 *
 * Clear stats cache on grant entity save
 */
function gnl_api_entity_postsave($entity, $type, $op) {
  if ($type = 'grant') {
    cache_clear_all('gnl_api_stats', 'cache');
  }
}

function _gnl_api_retrieve_org($id) {
  return _gnl_api_retrieve('org', $id);
}

function _gnl_api_retrieve_grant($id) {
  return _gnl_api_retrieve('grant', $id);
}

function _gnl_api_retrieve_person($id) {
  return _gnl_api_retrieve('person', $id);
}

function _gnl_api_index_orgs($limit, $offset, $filters, $sort) {
  return _gnl_api_index_nodes('org', $limit, $offset, $filters, $sort, null);
}

function _gnl_api_index_grants($limit, $offset, $filters, $sort) {
  return _gnl_api_index_nodes('grant', $limit, $offset, $filters, $sort, null);
}

function _gnl_api_index_people($limit, $offset, $filters, $sort) {
  return _gnl_api_index_nodes('person', $limit, $offset, $filters, $sort, 'people');
}

function _gnl_api_related_org_grants_funded($id, $limit, $offset) {
  $id = intval($id);

  $query = db_select('field_data_field_funder', 'fdff');
  $query
    ->condition('field_funder_target_id', $id, '=')
    ->fields('fdff', array('entity_id'))
    ->range($offset, $limit);

  $res = $query->execute()->fetchAllAssoc('entity_id');

  $nids = array_keys($res);

  $grants = array_map('_gnl_api_clean_node', node_load_multiple($nids));

  return array(
    'grants_funded' => array_values($grants)
  );
}

function _gnl_api_related_org_grants_received($id, $limit, $offset) {
  $id = intval($id);

  $query = db_select('field_data_field_recipient', 'fdfr');
  $query
    ->condition('field_recipient_target_id', $id, '=')
    ->fields('fdfr', array('entity_id'))
    ->range($offset, $limit);

  $res = $query->execute()->fetchAllAssoc('entity_id');

  $nids = array_keys($res);

  $grants = array_map('_gnl_api_clean_node', node_load_multiple($nids));

  return array(
    'grants_received' => array_values($grants)
  );
}

function _gnl_api_related_org_board_members($org_id, $limit, $offset) {
  $id = intval($org_id);

  $people = db_query("SELECT person.field_person_target_id AS 'person_id', n.title AS 'name', position.field_position_value AS 'position', compensation.field_compensation_value AS 'compensation', term.field_term_dates_value AS 'term_start', term.field_term_dates_value2 AS 'term_end' FROM {field_data_field_person} AS person INNER JOIN {node} AS n ON n.nid=person.field_person_target_id INNER JOIN {field_data_field_organization} AS org ON org.entity_id=person.entity_id LEFT JOIN {field_data_field_position} AS position ON position.entity_id=org.entity_id LEFT JOIN {field_data_field_compensation} AS compensation ON compensation.entity_id=org.entity_id LEFT JOIN {field_data_field_term_dates} AS term ON term.entity_id=org.entity_id WHERE org.field_organization_target_id=:org_id AND org.bundle='board_term'", array(':org_id' => $id))->fetchAll();

  return array(
    'board_members' => $people,
  );
}

/**
 * Helps retrieve a node.
 *
 * @param string $type
 *
 * @param int $id
 *
 * @return object
 */
function _gnl_api_retrieve($type, $id) {
  $node = node_load($id);
  if (!$node || $type !== $node->type) { // check the facts!
    return services_error(t('@type @id does not exist.', array('@type' => $type, '@id' => $id)), 404);
  } else {
    return _gnl_api_clean_node($node);
  }
}

/**
 * Helps get a set of nodes.
 *
 * @param string $bundle
 *   Drupal entity bundle
 *
 * @param int $limit
 *
 * @param int $offset
 *
 * @param array $filters
 *   array of property names (like title) to use as LIKE filters
 *
 * @param array $sort
 *   array of property name key (like title) and ASC/DESC val to SORT
 *
 * @return array
 */
function _gnl_api_index_nodes($bundle, $limit, $offset, $filters, $sort, $plural) {
  $plural = (isset($plural)) ? $plural : $bundle . 's';
  $limit = intval($limit);
  $offset = intval($offset);
  $limit = (is_int($limit) && $limit <= GNL_API_MAX_LIMIT) ? $limit : GNL_API_DEFAULT_LIMIT;
  $offset = (is_int($offset)) ? $offset : 0;

  // base query
  $query = db_select('node', 'n');
  $query
    ->condition('status', 1)
    ->condition('type', $bundle, '=')
    ->fields('n', array('nid'))
    ->range($offset, $limit);

  // add sort
  if (current($sort) == 'ASC' || current($sort) == 'DESC') {
    // order grants by amount? add join!
    if ($bundle == 'grant' && key($sort) == 'fdffa.field_funded_amount_value') {
      $query->join('field_data_field_funded_amount', 'fdffa', 'fdffa.entity_id=n.nid');
    }
    // order orgs by received
    if ($bundle == 'org' && key($sort) == 'received') {
      $query->addExpression("(SELECT SUM(fdffa.field_funded_amount_value) FROM {field_data_field_funded_amount} AS fdffa INNER JOIN {field_data_field_recipient} AS fdfr ON fdffa.entity_id=fdfr.entity_id WHERE fdfr.field_recipient_target_id=n.nid)", 'received');
    }
    // order orgs by funded
    if ($bundle == 'org' && key($sort) == 'funded') {
      $query->addExpression("(SELECT SUM(fdffa.field_funded_amount_value) FROM {field_data_field_funded_amount} AS fdffa INNER JOIN {field_data_field_funder} AS fdff ON fdffa.entity_id=fdff.entity_id WHERE fdff.field_funder_target_id=n.nid)", 'funded');
    }
    $query->orderBy(key($sort), current($sort));
  } else {
    $query->orderBy('n.created', 'ASC');
  }

  // if we're working with orgs and we want to filter on grant totals....
  if ($bundle == 'org' && array_key_exists('org_grants_received', $filters)) {
    $betweens = _gnl_api_parse_betweens($filters['org_grants_received']);
    if (!$betweens) {
      return services_error(t('malformed filter range'), 400);
    }
    $query->where("(SELECT SUM(fdffa.field_funded_amount_value) FROM {field_data_field_funded_amount} AS fdffa INNER JOIN {field_data_field_recipient} AS fdfr ON fdffa.entity_id=fdfr.entity_id WHERE fdfr.field_recipient_target_id=n.nid) BETWEEN :min AND :max", array(':min' => $betweens[0], ':max' => $betweens[1]));
    unset($filters['org_grants_received']);
  }
  if ($bundle == 'org' && array_key_exists('org_grants_funded', $filters)) {
    $betweens = _gnl_api_parse_betweens($filters['org_grants_funded']);
    if (!$betweens) {
      return services_error(t('malformed filter range'), 400);
    }
    $query->where("(SELECT SUM(fdffa.field_funded_amount_value) FROM {field_data_field_funded_amount} AS fdffa INNER JOIN {field_data_field_funder} AS fdff ON fdffa.entity_id=fdff.entity_id WHERE fdff.field_funder_target_id=n.nid) BETWEEN :min AND :max", array(':min' => $betweens[0], ':max' => $betweens[1]));
    unset($filters['org_grants_funded']);
  }

  $node_table_column_filters = array(
    'title',
    'nid',
    'status',
    'promote',
    'sticky',
    'uuid',
  );
  $post_filters = array();

  foreach ($filters as $property => $str) {
    if (in_array($property, $node_table_column_filters)) {
      $query->condition('n.' . $property, '%' . db_like($str) . '%', 'LIKE');
    } else if ($property == 'tid') {
      $query->join('taxonomy_index', 'ti', 'ti.nid=n.nid');
      $query->condition('ti.tid', intval($str));
    } else if ($property == 'has_boardmembers') {
      if ($str == 'true') {
        $query->join('field_data_field_organization', 'fdfo', 'fdfo.field_organization_target_id=n.nid');
        $query->condition('fdfo.bundle', 'board_term');
      }
      if ($str == 'false') {
        $query->leftJoin('field_data_field_organization', 'fdfo', 'n.nid=fdfo.field_organization_target_id');
        $query->isNull('fdfo.entity_id');
      }
    } else {
      $post_filters[$property] = $str;
    }
  }

  try {
    $res = $query->execute()->fetchAllAssoc('nid');
  } catch (Exception $e) {
    watchdog('gnl_api', 'SQL error at @request', array('@request' => request_uri()));
    return services_error(t('SQL error at @request', array('@request' => request_uri())), 400);
  }

  if (count($res) < 1) {
    return services_error(t('no results found'), 200);
  } else {
    $nids = array_keys($res);

    $nodes = array_map('_gnl_api_clean_node', node_load_multiple($nids));

    // apply non-sql filters
    foreach ($post_filters as $property => $str) {
      $nodes = array_filter($nodes, function($node) use ($property, $str) {
        if (!isset($node->{$property})) {
          return false;
        } else {
          return ($node->{$property} == $str);
        }
      });
    }

    return array(
      $plural => array_values($nodes)
    );
  }
}

/**
 * Changes 'n:n' to array(n,n) or FALSE
 *
 * @param str
 *
 * @return array or FALSE
 */
function _gnl_api_parse_betweens($arg) {
  $betweens = explode(':', $arg);
  return (count($betweens) === 2) ? $betweens : FALSE;
}

/**
 * Unsets Drupally things from nodes.
 *
 * @param object $node
 *
 * @return $node
 */
function _gnl_api_clean_node($node) {
  // first, unset things
  $unwanted_properties = array(
    'data',
    'language',
    'picture',
    'promote',
    'sticky',
  );

  foreach ($unwanted_properties as $prop) {
    unset($node->{$prop});
  }

  // set framework-friendly ID
  $node->id = $node->nid;
  unset($node->nid);

  // then, remove language from things that just don't need it
  foreach ($node as $key => $val) {
    if (is_array($val)) {
      // change empty arrays to NULL
      if (count($val) === 0) {
        $node->{$key} = NULL;
      }
      // remove translations
      // @todo change this in future l10n work
      if (strpos($key, 'field_') === 0 && array_key_exists('und', $val) && array_key_exists(0, $val['und'])) {
        $node->{$key} = $val['und'][0];
      }
    }
  }

  $ints = array(
    'changed',
    'comment',
    'created',
    'id',
    'revision_timestamp',
    'revision_uid',
    'status',
    'tnid',
    'translate',
    'uid',
    'vid'
  );

  if ($node->type == 'org') {
    array_push($ints, 'field_ein');
  }

  if ($node->type == 'grant') {
    $node->field_funded_amount = $node->field_funded_amount['value'];
    array_push($ints, 'field_funded_amount');
  }

  foreach ($ints as $prop) {
    $node->{$prop} = (int) $node->{$prop};
  }

  // remove safe_values from some properties
  $simplify_props = array();

  if ($node->type == 'grant') {
    array_push($simplify_props, 'field_source');
    array_push($simplify_props, 'field_internal_notes');

    $has_notes = (isset($node->body) && isset($node->body['und']) && isset($node->body['und'][0]) && isset($node->body['und'][0]['safe_value']));
    if ($has_notes) {
      $node->notes = $node->body['und'][0]['safe_value'];
    } else {
      $node->notes = null;
    }
  }

  if ($node->type == 'page') {
    $node->body = $node->body['und'][0]['value'];
  }

  foreach ($simplify_props as $prop) {
    if ($node->{$prop}['value']) {
      $node->{$prop} = $node->{$prop}['value'];
    }
  }

  // add grantor/grantee names to grants
  if ($node->type == 'grant') {
    $funder = node_load($node->field_funder['target_id']);
    $node->field_funder['name'] = $funder->title;
    $recipient = node_load($node->field_recipient['target_id']);
    $node->field_recipient['name'] = $recipient->title;
  }

  // make dates js-friendly
  if ($node->type == 'grant') {
    $start_date = new DateObject($node->field_year['value'], $node->field_year['timezone']);
    $node->field_start_date = date_format_date($start_date, 'custom', 'r');
    $end_date = new DateObject($node->field_year['value2'], $node->field_year['timezone']);
    $node->field_end_date = date_format_date($end_date, 'custom', 'r');
  }

  return $node;
}

